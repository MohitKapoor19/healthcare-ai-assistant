Hello Replit AI. Your task is to create a sophisticated, modern, and user-friendly web application called "AI Diagnostic Copilot." This app will function as an intelligent assistant for both doctors and patients, using a multi-agent AI system.Core ConceptThe application will have two primary modes:Doctor Mode: Provides a detailed clinical decision support tool. It takes patient symptoms, suggests potential diagnoses with confidence scores, recommends tests, highlights red flags, and provides citations.Patient Mode: Acts as a helpful guide. It takes patient symptoms and provides easy-to-understand explanations, suggests next steps, and clearly advises when it's critical to see a doctor in person.Technology StackCore Framework: Taipy. Use Taipy to build the entire web application, including the frontend UI and backend logic.Styling: Leverage Taipy's styling capabilities to create a modern, responsive, and visually stunning UI. Use a dark theme and aim for a premium feel.API Communication: Use Python's requests library for all AI model calls from the backend.Code Structure: Structure the application as a standard Taipy project.API ConfigurationUse a separate config.py file or a dictionary at the top of your main script to hold all API information. This makes it easy for the user to update endpoints in one place.# --- API Configuration ---
API_CONFIG = {
  "reasoner": {
    "url": "http://localhost:11434/api/chat", # Ollama endpoint
    "model": "deepseek-reasoner",
  },
  "chat": {
    "url": "http://localhost:11434/api/chat", # Ollama endpoint
    "model": "deepseek-chat",
  },
  "deepseek_api_placeholder": {
    "apiKey": "PASTE_YOUR_DEEPSEEK_API_KEY_HERE",
  }
}
Feature Implementation GuideImplement the following features, categorized for clarity.Category 1: Core Functionality & IntelligenceThese features make the AI's diagnostic and interactive capabilities more robust.FeatureDescriptionImplementation Notes (Taipy)Interactive Follow-up QuestionsMake the follow_up_questions from the Reasoner AI clickable. When a user clicks a question, it automatically becomes the next input, refining the diagnosis in a conversational loop.Render these questions as `<Conversation History & SessionsMaintain a stateful conversation history for the current session. Users can scroll up to see previous inputs and the AI's full analysis.Manage a list in the Taipy state that appends each user message and AI response. The UI would then render this entire list on each update.Symptom Severity & Duration InputAdd dedicated input fields for users to specify the severity (e.g., on a scale of 1-10) and duration (e.g., "3 days") of their symptoms.Add `<User Feedback LoopAdd simple "thumbs up/down" or a rating system for each AI-generated analysis. This feedback could be logged for later review.Add icon buttons to the response cards. The on_action callback will write the feedback (along with the query and response) to a log file or a simple database.Category 2: User Experience (UX) & InterfaceThese features focus on making the application more intuitive and accessible.FeatureDescriptionImplementation Notes (Taipy)Loading Skeletons & IndicatorsWhile waiting for the AI models to respond, display a "loading" animation or a "skeleton" outline of the response card.Use a boolean state variable (e.g., is_loading). When True, use a `<Patient-Friendly VisualizationsIn Patient Mode, use simple visual aids to supplement the text, like progress bars for confidence scores or icons for red flags.This can be achieved by embedding custom HTML/CSS within a `<Dual-Mode TogglePlace a clear `<toggleMulti-Language SupportAdd a dropdown to select a language. This would change the UI text and instruct the deepseek-chat model to respond in the chosen language.Use a dictionary in Python to store UI labels for different languages. The selected language will be passed as part of the prompt to the chat model."Clear Conversation" ButtonAdd a button to reset the session, clearing the conversation history and all inputs.The button's on_action callback will reset the Taipy state variables holding the conversation history and input values to their initial empty states.Category 3: Advanced Integrations & Clinical UtilityThese features elevate the tool to a near-professional level.FeatureDescriptionImplementation Notes (Taipy)Knowledge Base Citations (Doctor Mode)Prompt the Reasoner AI to include source hints (e.g., PubMed IDs, ICD-10 codes) for its diagnoses. Display these as clickable links.Modify the Reasoner AI prompt to ask for citations. The Taipy UI will then format these as Markdown links (e.g., [PubMed](https://pubmed.ncbi.nlm.nih.gov/...)).Data Export (PDF/Clipboard)Add "Export to PDF" or "Copy to Clipboard" buttons for the Diagnostic Analysis card in Doctor Mode.Clipboard: Use a button with a client-side JavaScript call. PDF: Requires a backend function using a library like FPDF or ReportLab to generate a PDF from the analysis data, which is then served for download.Multi-Agent AI Logic (The Core Engine)Initial User Input: The user provides symptoms via text input, along with structured inputs for severity and duration.Step 1: Call the Reasoner AI (deepseek-reasoner)Send the combined user input to the deepseek-reasoner model via its Ollama endpoint from the Taipy backend.Crucially, prompt the model to return a structured JSON object.Revised Prompt for Reasoner: "You are a clinical reasoning engine. A user has provided the following symptoms: [user's text input], with a severity of [severity score]/10 and a duration of [duration text]. Based on this, provide a differential diagnosis. Your response MUST be a single, raw JSON object with no other text or explanations. The JSON object must follow this exact structure: { \"possible_diagnoses\": [{\"condition\": \"string\", \"confidence_score\": \"string (e.g., 75%)\", \"citations\": [{\"source\": \"string (e.g., PubMed)\", \"id\": \"string\"}]}], \"suggested_tests\": [\"string\"], \"red_flags\": [\"string\"], \"follow_up_questions\": [\"string\"] }".Parse the JSON response in the backend.Step 2: Process the Response Based on ModeIf in "Doctor Mode": Display the full, parsed JSON data in a well-designed "Diagnostic Analysis" card, including clickable citations and interactive follow-up questions.If in "Patient Mode":Do not show the raw JSON.Make a second API call to the deepseek-chat model.Prompt for Chat Model: "You are a friendly and empathetic AI health assistant. Explain the following medical analysis to a patient in simple, easy-to-understand language. Respond in [Selected Language]. Avoid medical jargon. Clearly explain the 'red flags' and strongly advise the user to see a doctor in person if these are present. Conclude by suggesting what they should do next. Here is the medical analysis JSON: [insert the full JSON string from Step 1 here]".Display the friendly, textual response in the chat window.Final InstructionsPlease generate the complete Python code for this Taipy application. Ensure the code is well-commented, especially the API-calling logic and the multi-agent workflow. The final UI must be polished, modern, and highly usable, and must include a visible safety disclaimer: "This is an AI assistant and not a substitute for professional medical advice. Always consult a qualified doctor for any health concerns."